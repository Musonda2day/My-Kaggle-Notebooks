{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8ce94548",
   "metadata": {
    "papermill": {
     "duration": 0.007683,
     "end_time": "2022-10-16T10:10:56.673184",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.665501",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Investigating the popularity of The Office TV show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6621030b",
   "metadata": {
    "papermill": {
     "duration": 0.006241,
     "end_time": "2022-10-16T10:10:56.686265",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.680024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Table of Contents\n",
    "\n",
    "1. Introduction \n",
    "\n",
    "2. Import Relevant Packages \n",
    "\n",
    "3. Load Dataset \n",
    "\n",
    "4. Create Scatter Plot \n",
    "\n",
    "5. Star in Most Watched Episode "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afc1c5fd",
   "metadata": {
    "papermill": {
     "duration": 0.005853,
     "end_time": "2022-10-16T10:10:56.698411",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.692558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "### 1. Introduction\n",
    "\n",
    "First aired in 2001, the Office is a popular British TV series which depicts the work lives of employees in an office of a paper manufacturing company. \n",
    "\n",
    "\n",
    "The series ran for 9 seasons with a total of 201 episodes. In this post, we will analyze the popularity of each of the episodes by considering the following:\n",
    "\n",
    "\n",
    "1. Viewership. The number of US viewers in millions\n",
    "\n",
    "2. Rating of the Episodes. We consider a scaled rating from 0 being the worst to 1 being the best.\n",
    "\n",
    "3. Star Features. We look at which of the episodes featured stars and which ones did not.\n",
    "\n",
    "The analysis is accomplished using a scatterplot which incorporates the above three aspects. This is done using python programming.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4001cfc0",
   "metadata": {
    "papermill": {
     "duration": 0.00624,
     "end_time": "2022-10-16T10:10:56.710994",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.704754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2. Import Relevant packages\n",
    "\n",
    "The analysis uses pandas for importing data into a dataframe as well as for manipulating the data. We use matplotlib.pyplot for plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0677c7a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.726041Z",
     "iopub.status.busy": "2022-10-16T10:10:56.724964Z",
     "iopub.status.idle": "2022-10-16T10:10:56.736894Z",
     "shell.execute_reply": "2022-10-16T10:10:56.735747Z"
    },
    "papermill": {
     "duration": 0.022583,
     "end_time": "2022-10-16T10:10:56.739758",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.717175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.rcParams['figure.figsize'] = [11, 7]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea881d7e",
   "metadata": {
    "papermill": {
     "duration": 0.005842,
     "end_time": "2022-10-16T10:10:56.751893",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.746051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "726d6e5f",
   "metadata": {
    "papermill": {
     "duration": 0.005806,
     "end_time": "2022-10-16T10:10:56.763973",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.758167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Load the Dataset\n",
    "The dataset used contains information about each of the episodes.\n",
    "\n",
    "The dataset has a total of 14 features (columns) and 188 observations (rows). The following shows the output for the info of the loaded dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ca43e405",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.778696Z",
     "iopub.status.busy": "2022-10-16T10:10:56.777572Z",
     "iopub.status.idle": "2022-10-16T10:10:56.824483Z",
     "shell.execute_reply": "2022-10-16T10:10:56.823198Z"
    },
    "papermill": {
     "duration": 0.05745,
     "end_time": "2022-10-16T10:10:56.827618",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.770168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 188 entries, 0 to 187\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Unnamed: 0    188 non-null    int64  \n",
      " 1   Season        188 non-null    int64  \n",
      " 2   EpisodeTitle  188 non-null    object \n",
      " 3   About         188 non-null    object \n",
      " 4   Ratings       188 non-null    float64\n",
      " 5   Votes         188 non-null    int64  \n",
      " 6   Viewership    188 non-null    float64\n",
      " 7   Duration      188 non-null    int64  \n",
      " 8   Date          188 non-null    object \n",
      " 9   GuestStars    29 non-null     object \n",
      " 10  Director      188 non-null    object \n",
      " 11  Writers       188 non-null    object \n",
      "dtypes: float64(2), int64(4), object(6)\n",
      "memory usage: 17.8+ KB\n"
     ]
    }
   ],
   "source": [
    "#read the csv file into pandas dataframe\n",
    "the_office = pd.read_csv('../input/the-office-dataset/the_office_series.csv')\n",
    "the_office.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6fda2cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.842661Z",
     "iopub.status.busy": "2022-10-16T10:10:56.841584Z",
     "iopub.status.idle": "2022-10-16T10:10:56.874436Z",
     "shell.execute_reply": "2022-10-16T10:10:56.873206Z"
    },
    "papermill": {
     "duration": 0.042839,
     "end_time": "2022-10-16T10:10:56.876927",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.834088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Season</th>\n",
       "      <th>EpisodeTitle</th>\n",
       "      <th>About</th>\n",
       "      <th>Ratings</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Viewership</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Date</th>\n",
       "      <th>GuestStars</th>\n",
       "      <th>Director</th>\n",
       "      <th>Writers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Pilot</td>\n",
       "      <td>The premiere episode introduces the boss and s...</td>\n",
       "      <td>7.5</td>\n",
       "      <td>4936</td>\n",
       "      <td>11.2</td>\n",
       "      <td>23</td>\n",
       "      <td>24 March 2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ken Kwapis</td>\n",
       "      <td>Ricky Gervais |Stephen Merchant and Greg Daniels</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Diversity Day</td>\n",
       "      <td>Michael's off color remark puts a sensitivity ...</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4801</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23</td>\n",
       "      <td>29 March 2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ken Kwapis</td>\n",
       "      <td>B. J. Novak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Health Care</td>\n",
       "      <td>Michael leaves Dwight in charge of picking the...</td>\n",
       "      <td>7.8</td>\n",
       "      <td>4024</td>\n",
       "      <td>5.8</td>\n",
       "      <td>22</td>\n",
       "      <td>5 April 2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ken Whittingham</td>\n",
       "      <td>Paul Lieberstein</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>The Alliance</td>\n",
       "      <td>Just for a laugh, Jim agrees to an alliance wi...</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3915</td>\n",
       "      <td>5.4</td>\n",
       "      <td>23</td>\n",
       "      <td>12 April 2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bryan Gordon</td>\n",
       "      <td>Michael Schur</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Basketball</td>\n",
       "      <td>Michael and his staff challenge the warehouse ...</td>\n",
       "      <td>8.4</td>\n",
       "      <td>4294</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23</td>\n",
       "      <td>19 April 2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Greg Daniels</td>\n",
       "      <td>Greg Daniels</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Season   EpisodeTitle  \\\n",
       "0           0       1          Pilot   \n",
       "1           1       1  Diversity Day   \n",
       "2           2       1    Health Care   \n",
       "3           3       1   The Alliance   \n",
       "4           4       1     Basketball   \n",
       "\n",
       "                                               About  Ratings  Votes  \\\n",
       "0  The premiere episode introduces the boss and s...      7.5   4936   \n",
       "1  Michael's off color remark puts a sensitivity ...      8.3   4801   \n",
       "2  Michael leaves Dwight in charge of picking the...      7.8   4024   \n",
       "3  Just for a laugh, Jim agrees to an alliance wi...      8.1   3915   \n",
       "4  Michael and his staff challenge the warehouse ...      8.4   4294   \n",
       "\n",
       "   Viewership  Duration            Date GuestStars         Director  \\\n",
       "0        11.2        23   24 March 2005        NaN       Ken Kwapis   \n",
       "1         6.0        23   29 March 2005        NaN       Ken Kwapis   \n",
       "2         5.8        22    5 April 2005        NaN  Ken Whittingham   \n",
       "3         5.4        23   12 April 2005        NaN     Bryan Gordon   \n",
       "4         5.0        23   19 April 2005        NaN     Greg Daniels   \n",
       "\n",
       "                                            Writers  \n",
       "0  Ricky Gervais |Stephen Merchant and Greg Daniels  \n",
       "1                                       B. J. Novak  \n",
       "2                                  Paul Lieberstein  \n",
       "3                                     Michael Schur  \n",
       "4                                      Greg Daniels  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "the_office.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a7a7c6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.892013Z",
     "iopub.status.busy": "2022-10-16T10:10:56.891588Z",
     "iopub.status.idle": "2022-10-16T10:10:56.899420Z",
     "shell.execute_reply": "2022-10-16T10:10:56.898273Z"
    },
    "papermill": {
     "duration": 0.018281,
     "end_time": "2022-10-16T10:10:56.902016",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.883735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#create column for scaled rating from 0 to 1\n",
    "the_office['ScaledRating'] = (the_office['Ratings'] - the_office['Ratings'].min())/(the_office['Ratings'].max()-the_office['Ratings'].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9cef841",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.917134Z",
     "iopub.status.busy": "2022-10-16T10:10:56.916734Z",
     "iopub.status.idle": "2022-10-16T10:10:56.922699Z",
     "shell.execute_reply": "2022-10-16T10:10:56.921359Z"
    },
    "papermill": {
     "duration": 0.01629,
     "end_time": "2022-10-16T10:10:56.925029",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.908739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#rename the 'Unnamed 0' column to EpisodeNumber\n",
    "the_office.rename(columns={'Unnamed: 0': 'EpisodeNumber'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bc4ef197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.941194Z",
     "iopub.status.busy": "2022-10-16T10:10:56.940791Z",
     "iopub.status.idle": "2022-10-16T10:10:56.948315Z",
     "shell.execute_reply": "2022-10-16T10:10:56.947147Z"
    },
    "papermill": {
     "duration": 0.018035,
     "end_time": "2022-10-16T10:10:56.950867",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.932832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['EpisodeNumber', 'Season', 'EpisodeTitle', 'About', 'Ratings', 'Votes',\n",
       "       'Viewership', 'Duration', 'Date', 'GuestStars', 'Director', 'Writers',\n",
       "       'ScaledRating'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print column names\n",
    "the_office.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4768dedd",
   "metadata": {
    "papermill": {
     "duration": 0.007007,
     "end_time": "2022-10-16T10:10:56.964737",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.957730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "### 4. Create Scatterplot\n",
    "\n",
    "We create a scatterplot of viewership in millions against the episode number from the first to the last. The scatterplot should provide an indication of the rating of the episode as well as whether the episode featured stars or not. To accomplish these, we first define these plot components to be used in the scatter plot.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a60e889e",
   "metadata": {
    "papermill": {
     "duration": 0.006864,
     "end_time": "2022-10-16T10:10:56.978461",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.971597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 4.1 Define the Plot Components\n",
    "\n",
    "##### 4.1.1 Define x and y axes\n",
    "\n",
    "We first define the x and the y variables to be used in the plot. The x-axis will have the episode number and the y-axis will plot the viewership in millions. We do this by sub setting  these columns from the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7900bfbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:56.994004Z",
     "iopub.status.busy": "2022-10-16T10:10:56.993548Z",
     "iopub.status.idle": "2022-10-16T10:10:56.999111Z",
     "shell.execute_reply": "2022-10-16T10:10:56.997766Z"
    },
    "papermill": {
     "duration": 0.016457,
     "end_time": "2022-10-16T10:10:57.001829",
     "exception": false,
     "start_time": "2022-10-16T10:10:56.985372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#define x and y variables\n",
    "x = the_office['EpisodeNumber']\n",
    "y = the_office['Viewership']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3f897f1",
   "metadata": {
    "papermill": {
     "duration": 0.006406,
     "end_time": "2022-10-16T10:10:57.015197",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.008791",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 4.1.2 Define Color Scheme\n",
    "Next we define the color scheme for the markers to represent the rating of the episode as follows:\n",
    "\n",
    "Rating below 0.25 - red\n",
    "\n",
    "* Rating between [0.25, 0.5) - orange\n",
    "\n",
    "* Rating between [0.5, 0.75) - lightgreen\n",
    "\n",
    "* Rating equal or above 0.75 - darkgreen\n",
    "\n",
    "This is accomplished by looping through the column for ratings and assigning a corresponding color for each rating. The result is a list of colors that represents each of the rating:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "af2c9b40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:57.030632Z",
     "iopub.status.busy": "2022-10-16T10:10:57.030217Z",
     "iopub.status.idle": "2022-10-16T10:10:57.037037Z",
     "shell.execute_reply": "2022-10-16T10:10:57.035705Z"
    },
    "papermill": {
     "duration": 0.017125,
     "end_time": "2022-10-16T10:10:57.039357",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.022232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#define the color scheme\n",
    "\n",
    "##initiate list and string\n",
    "colors = []\n",
    "color = ''\n",
    "\n",
    "##loop through the ratings and assign color\n",
    "for i in the_office['ScaledRating']:\n",
    "    if i < 0.25:\n",
    "        color = 'red'\n",
    "    elif 0.25 <= i < 0.5:\n",
    "        color = 'orange'\n",
    "    elif 0.5 <= i < 0.75:\n",
    "        color = 'lightgreen'\n",
    "    elif i >= 0.75:\n",
    "        color = 'darkgreen'\n",
    "    colors.append(color)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2acda997",
   "metadata": {
    "papermill": {
     "duration": 0.006396,
     "end_time": "2022-10-16T10:10:57.052606",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.046210",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 4.1.3 Define Marker Size and Type\n",
    "\n",
    "The markers should be represented with a bigger size and a star for episodes which had stars in them. The episodes with stars will have a marker with size of 250 whilst those without stars will have a marker of 25. This is accomplished by looping through the 'GustStars' column and assigning the size and type of marker according to whether the episode featured stars or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8b759e67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:57.068079Z",
     "iopub.status.busy": "2022-10-16T10:10:57.067681Z",
     "iopub.status.idle": "2022-10-16T10:10:57.075252Z",
     "shell.execute_reply": "2022-10-16T10:10:57.073909Z"
    },
    "papermill": {
     "duration": 0.01851,
     "end_time": "2022-10-16T10:10:57.077733",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.059223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#define marker size and type\n",
    "\n",
    "##initialize empty lists and strings\n",
    "sizes = []\n",
    "markers = []\n",
    "size = ''\n",
    "marker = ''\n",
    "\n",
    "#loop through the 'GuestStar' column\n",
    "for i in the_office['GuestStars'].isnull():\n",
    "    if i == True:\n",
    "        size =25\n",
    "        marker = 'o'\n",
    "    else:\n",
    "        size = 250\n",
    "        marker = '*'\n",
    "    \n",
    "    ##append size and marker to respective lists    \n",
    "    sizes.append(size)\n",
    "    markers.append(marker)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab1a6908",
   "metadata": {
    "papermill": {
     "duration": 0.00635,
     "end_time": "2022-10-16T10:10:57.090922",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.084572",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "### 4.2 Plot Scatter Plot\n",
    "\n",
    "In order to plot with the specified components, we loop through the defined lists for the x-axis, y-axis, markers, sizes and colors and for each plot the points on the scatterplot with each of the defined parameters. This plots a scatterplot with size and shape of the marker indicating the feature of stars and the color indicating the rating of an episode. \n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c48b2c0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:57.105858Z",
     "iopub.status.busy": "2022-10-16T10:10:57.105421Z",
     "iopub.status.idle": "2022-10-16T10:10:58.990855Z",
     "shell.execute_reply": "2022-10-16T10:10:58.989662Z"
    },
    "papermill": {
     "duration": 1.895827,
     "end_time": "2022-10-16T10:10:58.993383",
     "exception": false,
     "start_time": "2022-10-16T10:10:57.097556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the scatter plot\n",
    "\n",
    "##initialize fig and set plot size\n",
    "fig = plt.figure()\n",
    "\n",
    "##loop through the lists and plot the points\n",
    "for xp, yp, m, s, c in zip(x, y, markers, sizes, colors):\n",
    "    plt.scatter(xp, yp, marker=m, c=c, s=s)\n",
    "\n",
    "##set title and labels\n",
    "plt.title('Popularity, Quality, and Guest Appearances on the Office')\n",
    "plt.xlabel('Episode Number')\n",
    "plt.ylabel('Viewership (Millions)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faa02133",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T09:42:11.712330Z",
     "iopub.status.busy": "2022-10-16T09:42:11.711895Z",
     "iopub.status.idle": "2022-10-16T09:42:11.726177Z",
     "shell.execute_reply": "2022-10-16T09:42:11.725178Z",
     "shell.execute_reply.started": "2022-10-16T09:42:11.712297Z"
    },
    "papermill": {
     "duration": 0.006967,
     "end_time": "2022-10-16T10:10:59.008182",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.001215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Majority of the episodes had viewership ranging between 7.5 million and 10 million. One episode had unusually high viewership of above 22.5 million. We note that towards the end beyond the 125th episode the viewership started declining together with the rating. The last three episodes, two of which had stars, had improved ratings. \n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c3e4102",
   "metadata": {
    "papermill": {
     "duration": 0.006913,
     "end_time": "2022-10-16T10:10:59.022346",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.015433",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 5. Star in Most Watched Episode\n",
    "\n",
    "We explore and see one of the stars that featured in the episode with the highest viewership. \n",
    "\n",
    "\n",
    "We start by first getting the maximum viewership and then sub-seting the 'gust_stars' column where the viewrship is equal to maximum. This will give us a string of the stars that featured in that episode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6ca4ff03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:59.038719Z",
     "iopub.status.busy": "2022-10-16T10:10:59.038295Z",
     "iopub.status.idle": "2022-10-16T10:10:59.049672Z",
     "shell.execute_reply": "2022-10-16T10:10:59.048542Z"
    },
    "papermill": {
     "duration": 0.022255,
     "end_time": "2022-10-16T10:10:59.051992",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.029737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Cloris Leachman, Jack Black, Jessica Alba'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#most views\n",
    "max_views = the_office['Viewership'].max()\n",
    "\n",
    "# get a string of stars who featured in the most viewed episode with max-views\n",
    "top_stars = the_office[the_office['Viewership']==max_views]['GuestStars'].values[0]\n",
    "\n",
    "top_stars"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71401767",
   "metadata": {
    "papermill": {
     "duration": 0.00711,
     "end_time": "2022-10-16T10:10:59.066497",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.059387",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We then split the string by the comma in order to get a list of stars that featured in the episode with the most views. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8c428ff4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:59.083407Z",
     "iopub.status.busy": "2022-10-16T10:10:59.082967Z",
     "iopub.status.idle": "2022-10-16T10:10:59.090312Z",
     "shell.execute_reply": "2022-10-16T10:10:59.089302Z"
    },
    "papermill": {
     "duration": 0.018867,
     "end_time": "2022-10-16T10:10:59.092896",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.074029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Cloris Leachman', ' Jack Black', ' Jessica Alba']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#split the string for stars by ',' to get a list of stars\n",
    "top_stars_list = top_stars.split(',')\n",
    "top_stars_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af028787",
   "metadata": {
    "papermill": {
     "duration": 0.007175,
     "end_time": "2022-10-16T10:10:59.107565",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.100390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To get the name of one of the stars that featured in the most watched episode, we index the list of the top stars by index 0:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "68b54a18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-16T10:10:59.126903Z",
     "iopub.status.busy": "2022-10-16T10:10:59.126229Z",
     "iopub.status.idle": "2022-10-16T10:10:59.132180Z",
     "shell.execute_reply": "2022-10-16T10:10:59.131292Z"
    },
    "papermill": {
     "duration": 0.018448,
     "end_time": "2022-10-16T10:10:59.134893",
     "exception": false,
     "start_time": "2022-10-16T10:10:59.116445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Cloris Leachman'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get the name of one of the stars\n",
    "top_star = top_stars_list[0]\n",
    "top_star "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.828806,
   "end_time": "2022-10-16T10:10:59.864422",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-10-16T10:10:47.035616",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
